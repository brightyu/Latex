tikz
画图需要导入tikz宏包，并在tikzpicture环境下使用相关命令
\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
  \draw (0,0) -- (1,1)
\end{tikzpicture}
\end{document}

\draw命令的attribute参数来指定一些全局的绘图风格。

画简单的图==》使用\tikz命令

\documentclass{article}
\usepackage{tikz}
\begin{document}
  \tikz \draw (0,0) -- (1,1);
  \tikz{\draw (0,0) -- (1,1)} % 等价于上面的命令
\end{document}

上边两种tikz命令的使用方式均可实现绘图。


命令的一般结构是command [attribte] path，其中command是某条命令，指明了做什么(what)；attribute是绘图风格，指明了如何做(how)；path是一条路径，指明了在哪儿做(where)。



直线和曲线
首先需要了解TikZ的坐标表示形式，有两种直接形式：直角坐标和极坐标。直角坐标采用(x, y)的形式，极坐标采用(theta:distance)的形式。后文的例子一般采用直角坐标表示，但均可以替换为极坐标形式。TikZ还可以通过相对位置描述坐标，使用+(x,y)和++(x,y)，表示相对于前一个点的方位。两者的区别在于，+不更新点的坐标，而++更新点的坐标（类似于C语言中的自增的概念）。
(0,0)+(1,1)+(2,3)分别表示(0,0)、(1,1)、(2,3)
(0,0)++(1,1)++(2,3)表示(0,0)、(1,1)、(3,4)

\draw (xb,yb) -- (xe,ye);  %从(xb,yb)到(xe,ye)的一条路径。直线的绘制命令如下

曲线是通过三次贝塞尔曲线绘制的，需要给出两个控制点坐标

\draw (xb,yb) .. controls (x1,y1) and (x2,y2) .. (xe,ye);

其中(x1,y1)和(x2,y2)为两个控制点，如果and (x2,y2)省略，则认为(x2,y2)等于(x1,y1)。控制点坐标如果用相对位置的极坐标表示会更加直观一些(e.g. +(30:5cm))。
属性
可以在\draw命令后使用[attribute]包括一些属性，指定绘图风格。
color:指定线的显色
thin/thick/semithick:指定线的宽度，前面可以加very/ultra修饰加强效果，注意ultra thin在一些低分辨率的介质上可能无法正常显示出来；semithick是介于thin和thick之间的粗度
dashed/dotted：指定虚线样式，前面可以加loosely/densely修饰加强效果
step：画网格时指定步长
dashed pattern：指定更复杂的虚线样式
rotate:指定绘图角度，在画完之后旋转该角度显示
scale：指定坐标缩放的比例，通常在全局环境中使用，值如3

简单图形
\draw (x0,y0) circle (r)：画圆，其中x0，y0是圆心坐标；r为半径，可以取10pt等
\draw (x0,y0) ellipse (a and b)：画椭圆，其中x0，y0是圆心坐标；a和b分别代表半长轴和半短轴长，可以互换
\draw (x0,y0) rectangle (x1,y1)：画矩形，两个坐标给出任意一条对角线的两个端点坐标
\draw (x0,y0) arc (theta0:theta1:r)：画弧，其中x0，y0是圆心坐标；r为半径；theta0和theta1指定弧角的范围。如果需要椭圆弧，则将r替换为a and b
\draw[step=step_len] (x0,y0) grid (x1,y1)：画网格，两个坐标给出矩形范围，step参数指定格子边长
画节点
node关键字是用于指明路径中的一个节点（结点），其参数允许指定节点的一些性质和显示的文字，格式如下
\draw (0,0) node [attribute] {some text} -- node [attribute] {some text} (1,1);
节点可以描述指定图元的含义。
..controls (x,y) and (x,y) .. node[属性, auto]{含义}; %将节点显示在路径旁边
{}中的文本可以是多行的，无需行分隔符。可选参数attribute有以下属性可以指定（多个属性间通过半角逗号分割）
name:节点的名字，不可以包括除下划线和连字符及空格以外的特殊字符（如逗号、句号、括号、冒号等）
shape:节点的形状，可以是circle、rectangle等
color:节点的颜色
draw:绘制节点的外框，值可以是颜色，例如blue!50等，也可以缺省为黑色
fill:填充节点内部，值是可以使颜色颜色
anchor:将文字放在指定坐标的附近，可选值有north、south、east、west或者其组合如south east
below/above/right/left:将文字放在指定坐标的附近，但可以指定距离如1pt或者3cm等，不赋值时效果与anchor类似
pos:当文字需要放在路径上时，用于指定在路径上的位置，取值范围为[0,1]，对应距起点的距离占总长度的比例
near start/near end:简单指定文字在路径上的位置，可以在前面加上very加强效果
sloped:旋转文字的角度使之与曲线相吻合
inner sep:指定在文本周围增加空白边缘，值如1pt等
minimum size:指定节点的最小尺寸，值如1mm等
below of/above of/right of/left of:指定相对与某个节点的位置，可以组合为below right of等，值为相对的节点名字。使用时，应省略绝对坐标位置
node distance:与上一功能结合使用，指定相对方向上的距离，值如5cm
label:用于绘制在该结点附近的说明文字，可以多次使用画出多个标签。值为 位置:文字，如below:This is a node.在节点正下方显示This is a node.，60:$60^\circ$则在60度的位置显示60°
auto:将节点放置在路径旁边
swap:当环境或节点使用auto选项时，在路径的另一侧显示节点
TikZ允许在不至于混淆的情况下省略shape=和color=，而直接给出属性的值。另外，节点的名字不光可以通过name指定，也可以直接在node关键字后用半角括号将名字括起来。

如果需要绘制多个节点，而具有相同的attribute，则可以在tikzpicture环境之外指定风格

\tikzstyle{style_name}=[circle,draw=blue!50]

\begin{tikzpicture}
\path (0,0) node [style=style_name] {node 1};
\end{tikzpicture}
在使用风格时，可以省略style，直接将风格名称用[]括起来。当然，如果从代码可读性角度来说，希望强调style_name是一种自定义风格，则使用style=style_name更好。预定义的风格可以同时使用多种，只需通过半角逗号分隔即可。预定义的风格也可以嵌套叠加，例如

\tikzstyle{style 1}=[very thick]
\tikzstyle{style 2}=[red]
\tikzstyle{style 2}+= [style 1]
style 2表示红色、很粗的风格。

如果只需要放置节点，可以通过构造一条路径依次放置，但更直观的方式是at表达式

\path node (node_1_name) at (0,0) {node 1} node (node_2_name) at (0,1) {node 2};

其简化形式是
\node (node_1_name) at (0,0) {node 1};
\node (node_2_name) at (0,1) {node 2};

at后不仅可以使用坐标形式，也可以是节点的锚点（将在下一小节介绍）形式，如nodename.north等。实际上，node关键字后的节点名称、at坐标、和风格选项并没有固定的顺序（风格还可以拆分成多段指定），只要将文字选项放在最后，即可使用自己习惯的排列。


流程图
首先介绍锚点的概念。锚点就是在节点边缘的一系列特殊的点，例如north、south、west、east、center分别表示节点的上、下、左、右和中心。引用方式为节点名称锚点名称，中间用半角句号连接即可。
我们可以使用\draw命令连接两个节点的锚点
\draw [->] (node1.west) -- (node2.east);
这样理论上可以画出流程图，但实际上代码可读性和通用性较差，可以仅指定节点名称，让TikZ自动选择锚点。

\draw [->] (node1) -- (node2); %如果需要画曲线，可以使用锚点形式
\draw [->] (node1) ..controls () and ().. (node2);

同样也可以使用to表达式自动确定

\draw [->] (node1) to [out=-120,in=60] (node2);
参数in和out分别指定了连接线进入和离开节点的角度，缺省时则为直线。还有一个简化选项是bend right，用于指定曲线向右侧弯曲的角度，也可通过在tikzpicture环境的可选参数bend angle中修改其缺省值。还有一种方法是使用edge表达式，这种方式在某个节点的入度和出度较大时十分方便，下面是一个例子，将1和2指向ctr，ctr指向3。

\tikzstyle{style}=[draw, shape=circle]
\begin{tikzpicture}[bend angle=45]
  \node[style] (1)             {1};
  \node[style] (2) [below of=1]{2};
  \node[style] (3) [below of=2]{3};
\node[style, right of=2, node distance=2cm] (center) {center} edge [<-, bend right] (1) edge [<-] (2) edge [->, bend left] (3);
\end{tikzpicture}

图层
如果绘图时需要绘制背景，而背景的大小又需要根据前景大小确定，即必须在前景绘制完毕后才能绘制背景。使用pgfonlayer环境可以完成这个任务。其基本格式如下

\pgfdeclarelayer{layer name}  %在tikzpicture环境外声明图层名称
\pgfsetlayers{backgound, layer 1, layer 2, main, …} %声明图层绘制顺序
\begin{tikzpicture}
\begin{pgfonlayer}{layer name}
\end{pgfonlayer}
\end{tikzpicture}

辖域
在tikzpicture环境内，可以使用scope环境控制风格的作用区域。
\begin{tikzpicture}[global style]
\begin{scope}[style 1]
\end{scope}
\begin{scope}[style 2]
\end{scope}
\end{tikzpicture}

剪裁
如果只需要一个整体图形的一部分，可以使用\clip命令根据指定路径进行剪裁。例如
\clip (x0,y0) rectangle (x1,y1)
\draw …
则对之后的绘图在(x0,y0)和(x1,y1)指定的矩形区域进行剪裁。注意，在scope中使用的clip命令只对本辖域有效。

坐标变换
常用变换功能

xshift/yshift：将图像沿x或y正向移动指定单位，值如5pt，-5cm等
shift：将图像平移到一个指定的坐标，例如shift={+(2,3)}
rotate：将图像旋转指定角度
rotate around：将图像绕指定点旋转
xscale/yscale：对x轴或y轴坐标进行缩放，例如xscale=-1表示图像左右翻转
scale：对x轴和y轴同时缩放
xslant/yslant：将图像倾斜
cm：使用坐标变换矩阵对坐标进行变换
 

填充
需要填充区域（作为背景等）可以使用\fill命令对指定路径区域进行填充，例如
\fill[gray] (0,0) -- (1,1) -- (1,0) -- cycle;
对一个直角三角形填充灰色，最后的--cycle可以省略，但最好不要省略。


循环
TikZ允许使用pstricks中强大的\multido命令，但有时支持的效果并不好。这里介绍\foreach语句。

\foreach \x in {x0, x0+d, ..., xn}
{command};

\foreach \x in {0, 1, ..., 10}
\draw[red](\x, \x)--(\x+1, \x);

使用\变量名表示一个变量；in之后是变量值的列表，可以使用...让TikZ自动生成等步长的列表；{command}为所执行的命令，可以将{}省去。

 

颜色表示
TikZ中的颜色使用的是xcolor宏包，可以使用百分比的表示方法，颜色名和百分比之间使用半角叹号分割，例如
red!20!black!30表示20%的红色和30%的黑色混合，最后可以加叹号，也可以不加。当剩余比例全部为一种颜色时，该颜色的百分比可以省略，例如
red!20!green表示20%的红色和80%的绿色混合。

箭头形状
TikZ中允许给非闭合的路径添加箭头，在\draw后使用[]指定即可。
->：终点加上标准箭头（即数学环境“趋于”符号\to或\gets的箭头样式）
<-：起点加上标准箭头
<->：起点和终点都加上标准箭头
->>：在终点加上两个标准箭头
如果希望使用其他箭头样式，可以用>=style指定，例如 \draw[->,>=stealth] (0,0) -- (1,0);


其他技巧
(x0,y0 |- x1,y1)：一种坐标表示形式，含义为过(x0,y0)的水平线与过(x1,y1)的竖直线的交点。当使用极坐标时，更能体现其优点
在\draw命令中，可以不使用--画线，而仅仅移动画笔到下一个点。当使用相对位置确定坐标时，更能体现其优点
